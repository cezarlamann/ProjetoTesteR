##VERIFICAÇÃO DO CÓDIGO
boxplot(baseSolo$Enxofre, main="Enxofre", ylab="Valores")
boxplot(baseSolo$MO, main="MO", ylab="Valores")
boxplot(baseSolo$Zinco, main="Zinco", ylab="Valores")
boxplot(baseSolo$Boro, main="Boro", ylab="Valores")
boxplot(baseSolo$Cobre, main="Cobre", ylab="Valores")
boxplot(baseSolo$Ferro, main="Ferro", ylab="Valores")
boxplot(baseSolo$Manganes, main="Manganes", ylab="Valores")
boxplot(baseSolo$MateriaOrganica, main="MateriaOrganica", ylab="Valores")
boxplot(baseSolo$CTC, main="CTC", ylab="Valores")
boxplot(baseSolo$SaturacaoPorBases, main="SaturacaoPorBases", ylab="Valores")
boxplot(baseSolo$CalcioSaturacaoDeBases, main="CalcioSaturacaoDeBases", ylab="Valores")
boxplot(baseSolo$MagnesioSaturacaoDebases, main="MagnesioSaturacaoDebases", ylab="Valores")
boxplot(baseSolo$PotassioSaturacaoDeBases, main="PotassioSaturacaoDeBases", ylab="Valores")
boxplot(baseSolo$pH, main="pH", ylab="Valores")
boxplot(baseSolo$TeorDeArgila, main="TeorDeArgila", ylab="Valores")
#limpeza
#Remove colunas com pouca variancia na baseSolo
baseSolo.nzv <- nearZeroVar(baseSolo, saveMetrics = TRUE)
baseSolo <- baseSolo[c(rownames(baseSolo.nzv[baseSolo.nzv$nzv == FALSE, ])) ]
rm(baseSolo.nzv)
#Remove coluna WGS84_ALT
baseSolo <- baseSolo[, !colnames(baseSolo) %in% c("WGS84_ALT") ]
# analise
par(mfrow=c(2,2), mar=c(2,5,2,1), las=1, bty="n")
boxplot(baseColheita$Rendimento.seco, main="Quartis", ylab="Valores")
hist(baseColheita$Rendimento.seco, main="Histograma", ylab="Frequencia")
d <- density(baseColheita$Rendimento.seco) # returns the density data
plot(d, main="Densidade", ylab="Percentual") # plots the results
x <- baseColheita$Rendimento.seco
h<-hist(x, main="Curva Normal", ylab="Frequencia")
xfit<-seq(min(x),max(x),length=40)
yfit<-dnorm(xfit,mean=mean(x),sd=sd(x))
yfit <- yfit*diff(h$mids[1:2])*length(x)
lines(xfit, yfit, col="blue", lwd=2)
#limpeza
#Remove colunas sem importancia, mantendo apenas latitude, latitude, longitude e Rendimento.seco na baseColheita
baseColheita <- baseColheita[c("Latitude", "Longitude", "Rendimento.seco") ]
plot(baseColheita$Rendimento.seco)
baseColheita <- baseColheita[baseColheita$Rendimento.seco > 0 ,]
abline(h=mean(baseColheita$Rendimento.seco), col="green")
abline(h=mean(baseColheita$Rendimento.seco)*(1+(1/3)), col="blue")
abline(h=mean(baseColheita$Rendimento.seco)*(1-(1/3)), col="red")
summary(baseColheita$Rendimento.seco)
baseColheita <- baseColheita[baseColheita$Rendimento.seco < 8 | baseColheita$Rendimento.seco > 15 ,]
summary(baseColheita$Rendimento.seco)
#(4) Unir os datasets
radius <- 0
dataset <- cbind(baseSolo[sample(nrow(baseSolo), 0), ], baseColheita[sample(nrow(baseColheita), 0), ])
radiusOfTheEarth <- 6378137
minimumDistance <- 3
i <- 0
ibaseSolo <- iter(baseSolo, by = "row")
while(i < ibaseSolo$length) {
solo = try(nextElem(ibaseSolo))
i <- i + 1
p1 <- c(solo$Longitude, solo$Latitude)
print(i)
#print(solo)
j <- 0
ibaseColheita <- iter(baseColheita, by = "row")
while(j < ibaseColheita$length) {
colheita = try(nextElem(ibaseColheita))
j <- j + 1
p2 <- c(colheita$Longitude, colheita$Latitude)
#print(j)
#print(colheita)
d <- distHaversine(p1, p2, r=radiusOfTheEarth)
radius <- rbind(radius,d)
#print(d)
if (d < minimumDistance) {
#print("match")
merged.data <- cbind(solo,colheita)
dataset <- rbind(dataset,merged.data)
}
}
}
dataset[, 'Produtividade'] <- ifelse(dataset$Rendimento.seco >= median(dataset$Rendimento.seco), 1, 0)
dataset$Produtividade[dataset$Rendimento.seco<9.3] <- 0 #baixa
dataset$Produtividade[dataset$Rendimento.seco>10.9] <- 1 #alta
alta <- dataset[which(dataset$Produtividade==1),]
baixa <- dataset[which(dataset$Produtividade==0),]

#TENTATIVA DE ENTENDIMENTO DOS DATASETS DE ALTA PRODUTIVIDADE E BAIXA PRODUTIVIDADE
dfDataSet = data.frame(dataset)
dfDataSetAlta = data.frame(alta)
dfDataSetBaixa = data.frame(baixa)

#TENTATIVA DE AGREGAÇÃO POR TIPO DE PRODUTIVIDADE
dfAgregado = aggregate(dfDataSet$Rendimento.seco, by=list(PontoAmostral=dfDataSet$PontosAmostrais), FUN=median)
#mediana de rendimento por ponto amostral da base alta
dfAgregadoAlta = aggregate(dfDataSetAlta$Rendimento.seco, by=list(PontoAmostral=dfDataSetAlta$PontosAmostrais), FUN=median)
#mediana de rendimento por ponto amostral da base baixa
dfAgregadoBaixa = aggregate(dfDataSetBaixa$Rendimento.seco, by=list(PontoAmostral=dfDataSetBaixa$PontosAmostrais), FUN=median)
View(dfAgregado)
dfAgregado = aggregate(dfDataSet$Rendimento.seco, by=list(PontoAmostral=dfDataSet$PontosAmostrais), FUN=mean)
View(dfAgregado)

# AQUI PERCEBEMOS QUE ESTÁVAMOS ERRADOS E QUE TÍNHAMOS QUE CONSIDERAR O DATASET INTEIRO E NÃO AGREGAR POR TIPO DE PRODUTIVIDADE
dfAgregado = aggregate(dfDataSet$Rendimento.seco, by=list(PontoAmostral=dfDataSet$PontosAmostrais), FUN=median)
View(dfAgregado)
View(dfDataSetAlta)
View(dfAgregado)

#TENTATIVAS FRUSTRADAS DE ORDENAÇÃO DO AGREGADO PARA PEGAR OS MAIS PRODUTIVOS E OS MENOS PRODUTIVOS

dfAgregado = dfAgregado[order(-dfAgregado$x)]
dfAgregado = dfAgregado[order(-dfAgregado$PontoAmostral)]
dfAgregado = aggregate(dfDataSet$Rendimento.seco, by=list(PontoAmostral=dfDataSet$PontosAmostrais), FUN=median)
class(dfAgregado)
colnames(dfAgregado) = c("PontoAmostral","Rendimento")
dfAgregado
dfAgregado = dfAgregado[order(-dfAgregado$Rendimento)]
View(dfAgregado)

#TENTATIVA FRUSTRADA DE RECARGA DE DADOS PRA VER SE FUNCIONAVA A ORDENAÇÃO

dataset = baseFinal
dataset.new <- baseFinal[, -(17:18)]	#Retira Latitude e Longitude da baseSolo
dataset.pca <- prcomp(dataset.new[, 5:16], center = TRUE, scale. = TRUE) #Retira Latitude e Longitude da baseColheita para Calcular PCA
#g <- ggbiplot(dataset.pca, groups = dataset$Produtividade, obs.scale = 1, var.scale = 1, circle = TRUE, ellipse = TRUE)
#print(g)
#(6) MAPA
summary(dataset$Rendimento.seco)
dataset[, 'Produtividade'] <- ifelse(dataset$Rendimento.seco >= median(dataset$Rendimento.seco), 1, 0)
dataset$Produtividade[dataset$Rendimento.seco<9.3] <- 0 #baixa
dataset$Produtividade[dataset$Rendimento.seco>10.9] <- 1 #alta
baseFinal = read.csv("datasets/dataset.csv")
dataset = baseFinal
dataset.new <- baseFinal[, -(17:18)]	#Retira Latitude e Longitude da baseSolo
dataset.pca <- prcomp(dataset.new[, 5:16], center = TRUE, scale. = TRUE) #Retira Latitude e Longitude da baseColheita para Calcular PCA
#g <- ggbiplot(dataset.pca, groups = dataset$Produtividade, obs.scale = 1, var.scale = 1, circle = TRUE, ellipse = TRUE)
#print(g)
#(6) MAPA
summary(dataset$Rendimento.seco)
dataset[, 'Produtividade'] <- ifelse(dataset$Rendimento.seco >= median(dataset$Rendimento.seco), 1, 0)
dataset$Produtividade[dataset$Rendimento.seco<9.3] <- 0 #baixa
dataset$Produtividade[dataset$Rendimento.seco>10.9] <- 1 #alta
dfDataSet = data.frame(dataset)
dfAgregado = aggregate(dfDataSet$Rendimento.seco, by=list(PontoAmostral=dfDataSet$PontosAmostrais), FUN=median)
View(dfAgregado)
colnames(dfAgregado) = c("PontoAmostral","Rendimento")

#MAIS TENTATIVAS FRUSTRADAS DE ORDENAÇÃO PELO NOME DA COLUNA DE Rendimento

dfAgregado = dfAgregado[order(-dfAgregado$Rendimento)]
library(caret)
# install.packages("devtools")
# install.packages("arules")
# install.packages("ggplot2")
# install.packages("caret")
# install.packages("iterators")
# install.packages("geosphere")
library(caret)
library(devtools)
# library(ggbiplot)
library(arules)
library(ggplot2)
library(iterators)
library(geosphere)
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
baseSolo = read.csv("datasets/baseSolo.csv")
baseColheita = read.csv("datasets/baseColheita.csv")
baseFinal = read.csv("datasets/dataset.csv")
# #Remove colunas com pouca variancia na baseSolo
# baseSolo.nzv = nearZeroVar(baseSolo, saveMetrics = TRUE)
# baseSolo = baseSolo[c(rownames(baseSolo.nzv[baseSolo.nzv$nzv == FALSE, ])) ]
# rm(baseSolo.nzv)
# par(mfrow=c(4,5), mar=c(2,5,2,1), las=1, bty="n")
# boxplot(baseSolo$Calcio, main="Calcio", ylab="Valores")
# boxplot(baseSolo$Magnesio, main="Magnesio", ylab="Valores")
# boxplot(baseSolo$Magnesio, main="Aluminio", ylab="Valores")
# boxplot(baseSolo$Potassio, main="Potassio", ylab="Valores")
# boxplot(baseSolo$Fosforo, main="Fosforo", ylab="Valores")
# boxplot(baseSolo$Enxofre, main="Enxofre", ylab="Valores")
# boxplot(baseSolo$MO, main="MO", ylab="Valores")
# boxplot(baseSolo$CTC, main="CTC", ylab="Valores")
# boxplot(baseSolo$SaturacaoPorBases, main="SaturacaoPorBases", ylab="Valores")
# boxplot(baseSolo$CalcioSaturacaoDeBases, main="CalcioSaturacaoDeBases", ylab="Valores")
# boxplot(baseSolo$MagnesioSaturacaoDebases, main="MagnesioSaturacaoDebases", ylab="Valores")
# boxplot(baseSolo$PotassioSaturacaoDeBases, main="PotassioSaturacaoDeBases", ylab="Valores")
# boxplot(baseSolo$pH, main="pH", ylab="Valores")
dataset = baseFinal
dataset.new <- baseFinal[, -(17:18)]	#Retira Latitude e Longitude da baseSolo
dataset.pca <- prcomp(dataset.new[, 5:16], center = TRUE, scale. = TRUE) #Retira Latitude e Longitude da baseColheita para Calcular PCA
#g <- ggbiplot(dataset.pca, groups = dataset$Produtividade, obs.scale = 1, var.scale = 1, circle = TRUE, ellipse = TRUE)
#print(g)
#(6) MAPA
summary(dataset$Rendimento.seco)
dataset[, 'Produtividade'] <- ifelse(dataset$Rendimento.seco >= median(dataset$Rendimento.seco), 1, 0)
dataset$Produtividade[dataset$Rendimento.seco<9.3] <- 0 #baixa
dataset$Produtividade[dataset$Rendimento.seco>10.9] <- 1 #alta
dfDataSet = data.frame(dataset)
dfAgregado = aggregate(dfDataSet$Rendimento.seco, by=list(PontoAmostral=dfDataSet$PontosAmostrais), FUN=median)
#colnames(dfAgregado) = c("PontoAmostral","Rendimento")

#MAIS TENTATIVAS FRUSTRADAS DE ORDENAÇÃO PELO NOME DA COLUNA DE Rendimento (DE NOVO)

#dfAgregado = dfAgregado[order(-dfAgregado$Rendimento)]
#dfDataSetAlta = dfDataSetAlta[order(-dfDataSetAlta$Rendimento.seco, dfDataSetAlta$PontosAmostrais),] #ordenar pelo Rendimento.seco
#dfDataSetBaixa = dfDataSetBaixa[order(dfDataSetBaixa$Rendimento.seco),] #ordenar pelo Rendimento.seco
# colunas <- c("Calcio","Magnesio","Al","Potassio","Fosforo","Enxofre","MO","CTC","SaturacaoPorBases","CalcioSaturacaoDeBases","MagnesioSaturacaoDebases","PotassioSaturacaoDeBases","pH")
# baseAlta.new <- dataset[which(dataset$PontosAmostrais == 107), colunas]
# baseAlta.new[, colunas] <- lapply(baseAlta.new[, colunas], factor)
# baseAlta.tr <- apriori(
#   baseAlta.new,
#   parameter = list(support = 1, minlen = 13, maxlen = 13, target = "frequent")
# )
#

## AQUI JÁ ESTÁVAMOS PENSANDO EM PEGAR A BASE BAIXA PARA O APRIORI

# baseBaixa.new <- dataset[which(dataset$PontosAmostrais == 107), colunas]
# baseBaixa.new[, colunas] <- lapply(baseBaixa.new[, colunas], factor)
# baseBaixa.tr <- apriori(
#   baseBaixa.new,
#   parameter = list(support = 1, minlen = 13, maxlen = 13, target = "frequent")
# )
#
# inspect(baseAlta.tr)
# inspect(baseBaixa.tr)
View(dfAgregado)
View(dataset)
dfAgregado = data.frame(aggregate(dfDataSet$Rendimento.seco, by=list(PontoAmostral=dfDataSet$PontosAmostrais), FUN=median))
colnames(dfAgregado) = c("PontoAmostral","Rendimento")

#MAIS TENTATIVAS FRUSTRADAS DE ORDENAÇÃO PELO NOME DA COLUNA DE Rendimento (NÃO ACHAVA O NOME DA COLUNA)

dfAgregado = dfAgregado[order(-dfAgregado$Rendimento)]
dfAgregado = data.frame(aggregate(-dfDataSet$Rendimento.seco, by=list(PontoAmostral=dfDataSet$PontosAmostrais), FUN=median))
dfAgregado
dfAgregado = data.frame(aggregate(order(-dfDataSet$Rendimento.seco), by=list(PontoAmostral=dfDataSet$PontosAmostrais), FUN=median))
dfAgregado

#MAIS TENTATIVAS FRUSTRADAS DE ORDENAÇÃO PELO NOME DA COLUNA DE Rendimento (AGORA CONSEGUIMOS DEFINIR O NOME DA COLUNA MAS A ORDENAÇÃO NÃO FUNCIONA)

dfAgregado = setNames(aggregate(dfDataSet$Rendimento.seco, by=list(PontoAmostral=dfDataSet$PontosAmostrais), FUN=median), c("PontoAmostral", "Rendimento"))
dfAgregado
dfAgregado = dfAgregado[order(-dfAgregado$Rendimento)]
dfAgregado
dfAgregado = dfAgregado[sort(dfAgregado$Rendimento, TRUE)]
dfAgregado = dfAgregado[sort(dfAgregado$Rendimento, decreasing = TRUE)]
dfAgregado = dfAgregado[sort(dfAgregado[,2], decreasing = TRUE)]
dfAgregado = dfAgregado[sort(dfAgregado[,1], decreasing = TRUE)]
dfAgregado = dfAgregado[order(dfAgregado[,2])]
dfAgregado[sort(dfAgregado[,2], TRUE),]
dfAgregado[sort(dfAgregado$Rendimento, TRUE),]
dfAgregado[order(dfAgregado$Rendimento, decreasing = TRUE),]

# DEU CERTO A ORDENAÇÃO!!!!!!

dfAgregado = dfAgregado[order(dfAgregado$Rendimento, decreasing = TRUE),]

#TENTATIVAS DE PEGAR OS PONTOS AMOSTRAIS DE MAIOR E MENOR PRODUTIVIDADE
#TENTATIVA DE PEGAR OS ÍNDICES

length(dfAgregado)
length(dfAgregado[1])
length(dfAgregado[1,])
length(dfAgregado[,1])
dfAgregado(length(dfAgregado[,1]))
dfAgregado[length(dfAgregado[,1])]
dfAgregado[1]
dfAgregado[1][1]
dfAgregado[1,1]

# TENTATIVA ERRADA DE PEGAR O MENOS PRODUTIVO

dfAgregado[1,length(dfAgregado[,1])]
dfAgregado[1,length(dfAgregado[,1]) -1]

# AQUI DEU CERTO PEGAR O INDICE

dfAgregado[length(dfAgregado[,1]),1]


#EXECUÇÃO INTEIRA DO SCRIPT PRA VER SE FUNCIONA TUDO

# install.packages("devtools")
# install.packages("arules")
# install.packages("ggplot2")
# install.packages("caret")
# install.packages("iterators")
# install.packages("geosphere")
library(caret)
library(devtools)
# library(ggbiplot)
library(arules)
library(ggplot2)
library(iterators)
library(geosphere)
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
baseSolo = read.csv("datasets/baseSolo.csv")
baseColheita = read.csv("datasets/baseColheita.csv")
baseFinal = read.csv("datasets/dataset.csv")
# #Remove colunas com pouca variancia na baseSolo
# baseSolo.nzv = nearZeroVar(baseSolo, saveMetrics = TRUE)
# baseSolo = baseSolo[c(rownames(baseSolo.nzv[baseSolo.nzv$nzv == FALSE, ])) ]
# rm(baseSolo.nzv)
# par(mfrow=c(4,5), mar=c(2,5,2,1), las=1, bty="n")
# boxplot(baseSolo$Calcio, main="Calcio", ylab="Valores")
# boxplot(baseSolo$Magnesio, main="Magnesio", ylab="Valores")
# boxplot(baseSolo$Magnesio, main="Aluminio", ylab="Valores")
# boxplot(baseSolo$Potassio, main="Potassio", ylab="Valores")
# boxplot(baseSolo$Fosforo, main="Fosforo", ylab="Valores")
# boxplot(baseSolo$Enxofre, main="Enxofre", ylab="Valores")
# boxplot(baseSolo$MO, main="MO", ylab="Valores")
# boxplot(baseSolo$CTC, main="CTC", ylab="Valores")
# boxplot(baseSolo$SaturacaoPorBases, main="SaturacaoPorBases", ylab="Valores")
# boxplot(baseSolo$CalcioSaturacaoDeBases, main="CalcioSaturacaoDeBases", ylab="Valores")
# boxplot(baseSolo$MagnesioSaturacaoDebases, main="MagnesioSaturacaoDebases", ylab="Valores")
# boxplot(baseSolo$PotassioSaturacaoDeBases, main="PotassioSaturacaoDeBases", ylab="Valores")
# boxplot(baseSolo$pH, main="pH", ylab="Valores")
dataset = baseFinal
dataset.new <- baseFinal[, -(17:18)]	#Retira Latitude e Longitude da baseSolo
dataset.pca <- prcomp(dataset.new[, 5:16], center = TRUE, scale. = TRUE) #Retira Latitude e Longitude da baseColheita para Calcular PCA
#g <- ggbiplot(dataset.pca, groups = dataset$Produtividade, obs.scale = 1, var.scale = 1, circle = TRUE, ellipse = TRUE)
#print(g)
#(6) MAPA
summary(dataset$Rendimento.seco)
dataset[, 'Produtividade'] <- ifelse(dataset$Rendimento.seco >= median(dataset$Rendimento.seco), 1, 0)
dataset$Produtividade[dataset$Rendimento.seco<9.3] <- 0 #baixa
dataset$Produtividade[dataset$Rendimento.seco>10.9] <- 1 #alta
dfDataSet = data.frame(dataset)
dfAgregado = setNames(aggregate(dfDataSet$Rendimento.seco, by=list(PontoAmostral=dfDataSet$PontosAmostrais), FUN=median), c("PontoAmostral", "Rendimento"))
dfAgregado = dfAgregado[order(dfAgregado$Rendimento, decreasing = TRUE),]
PontoAmostralMaisProdutivo = dfAgregado[1,1]
PontoAmostralMenosProdutivo = dfAgregado[length(dfAgregado[,1]),1]
# colunas <- c("Calcio","Magnesio","Al","Potassio","Fosforo","Enxofre","MO","CTC","SaturacaoPorBases","CalcioSaturacaoDeBases","MagnesioSaturacaoDebases","PotassioSaturacaoDeBases","pH")
# baseAlta.new <- dataset[which(dataset$PontosAmostrais == 107), colunas]
# baseAlta.new[, colunas] <- lapply(baseAlta.new[, colunas], factor)
# baseAlta.tr <- apriori(
#   baseAlta.new,
#   parameter = list(support = 1, minlen = 13, maxlen = 13, target = "frequent")
# )
#
# baseBaixa.new <- dataset[which(dataset$PontosAmostrais == 107), colunas]
# baseBaixa.new[, colunas] <- lapply(baseBaixa.new[, colunas], factor)
# baseBaixa.tr <- apriori(
#   baseBaixa.new,
#   parameter = list(support = 1, minlen = 13, maxlen = 13, target = "frequent")
# )
#
# inspect(baseAlta.tr)
# inspect(baseBaixa.tr)



# NESTA EXECUÇÃO JÁ SUBSTITUIMOS AS VARIÁVEIS PARA O APRIORI

# install.packages("devtools")
# install.packages("arules")
# install.packages("ggplot2")
# install.packages("caret")
# install.packages("iterators")
# install.packages("geosphere")
library(caret)
library(devtools)
# library(ggbiplot)
library(arules)
library(ggplot2)
library(iterators)
library(geosphere)
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
baseSolo = read.csv("datasets/baseSolo.csv")
baseColheita = read.csv("datasets/baseColheita.csv")
baseFinal = read.csv("datasets/dataset.csv")
# #Remove colunas com pouca variancia na baseSolo
# baseSolo.nzv = nearZeroVar(baseSolo, saveMetrics = TRUE)
# baseSolo = baseSolo[c(rownames(baseSolo.nzv[baseSolo.nzv$nzv == FALSE, ])) ]
# rm(baseSolo.nzv)
# par(mfrow=c(4,5), mar=c(2,5,2,1), las=1, bty="n")
# boxplot(baseSolo$Calcio, main="Calcio", ylab="Valores")
# boxplot(baseSolo$Magnesio, main="Magnesio", ylab="Valores")
# boxplot(baseSolo$Magnesio, main="Aluminio", ylab="Valores")
# boxplot(baseSolo$Potassio, main="Potassio", ylab="Valores")
# boxplot(baseSolo$Fosforo, main="Fosforo", ylab="Valores")
# boxplot(baseSolo$Enxofre, main="Enxofre", ylab="Valores")
# boxplot(baseSolo$MO, main="MO", ylab="Valores")
# boxplot(baseSolo$CTC, main="CTC", ylab="Valores")
# boxplot(baseSolo$SaturacaoPorBases, main="SaturacaoPorBases", ylab="Valores")
# boxplot(baseSolo$CalcioSaturacaoDeBases, main="CalcioSaturacaoDeBases", ylab="Valores")
# boxplot(baseSolo$MagnesioSaturacaoDebases, main="MagnesioSaturacaoDebases", ylab="Valores")
# boxplot(baseSolo$PotassioSaturacaoDeBases, main="PotassioSaturacaoDeBases", ylab="Valores")
# boxplot(baseSolo$pH, main="pH", ylab="Valores")
dataset = baseFinal
dataset.new <- baseFinal[, -(17:18)]	#Retira Latitude e Longitude da baseSolo
dataset.pca <- prcomp(dataset.new[, 5:16], center = TRUE, scale. = TRUE) #Retira Latitude e Longitude da baseColheita para Calcular PCA
#g <- ggbiplot(dataset.pca, groups = dataset$Produtividade, obs.scale = 1, var.scale = 1, circle = TRUE, ellipse = TRUE)
#print(g)
#(6) MAPA
summary(dataset$Rendimento.seco)
dataset[, 'Produtividade'] <- ifelse(dataset$Rendimento.seco >= median(dataset$Rendimento.seco), 1, 0)
dataset$Produtividade[dataset$Rendimento.seco<9.3] <- 0 #baixa
dataset$Produtividade[dataset$Rendimento.seco>10.9] <- 1 #alta
dfDataSet = data.frame(dataset)
dfAgregado = setNames(aggregate(dfDataSet$Rendimento.seco, by=list(PontoAmostral=dfDataSet$PontosAmostrais), FUN=median), c("PontoAmostral", "Rendimento"))
dfAgregado = dfAgregado[order(dfAgregado$Rendimento, decreasing = TRUE),]
PontoAmostralMaisProdutivo = dfAgregado[1,1]
PontoAmostralMenosProdutivo = dfAgregado[length(dfAgregado[,1]),1]
colunas <- c("Calcio","Magnesio","Al","Potassio","Fosforo","Enxofre","MO","CTC","SaturacaoPorBases","CalcioSaturacaoDeBases","MagnesioSaturacaoDebases","PotassioSaturacaoDeBases","pH")
baseAlta.new <- dataset[which(dataset$PontosAmostrais == PontoAmostralMaisProdutivo), colunas]
baseAlta.new[, colunas] <- lapply(baseAlta.new[, colunas], factor)
baseAlta.tr <- apriori(
baseAlta.new,
parameter = list(support = 1, minlen = 13, maxlen = 13, target = "frequent")
)
baseBaixa.new <- dataset[which(dataset$PontosAmostrais == PontoAmostralMenosProdutivo), colunas]
baseBaixa.new[, colunas] <- lapply(baseBaixa.new[, colunas], factor)
baseBaixa.tr <- apriori(
baseBaixa.new,
parameter = list(support = 1, minlen = 13, maxlen = 13, target = "frequent")
)
inspect(baseAlta.tr)
inspect(baseBaixa.tr)
#(6) MAPA
summary(dataset$Rendimento.seco)
# install.packages("devtools")
# install.packages("arules")
# install.packages("ggplot2")
# install.packages("caret")
# install.packages("iterators")
# install.packages("geosphere")
library(caret)
library(devtools)
# library(ggbiplot)
library(arules)
library(ggplot2)
library(iterators)
library(geosphere)
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
baseSolo = read.csv("datasets/baseSolo.csv")
baseColheita = read.csv("datasets/baseColheita.csv")
baseFinal = read.csv("datasets/dataset.csv")
# #Remove colunas com pouca variancia na baseSolo
# baseSolo.nzv = nearZeroVar(baseSolo, saveMetrics = TRUE)
# baseSolo = baseSolo[c(rownames(baseSolo.nzv[baseSolo.nzv$nzv == FALSE, ])) ]
# rm(baseSolo.nzv)
# par(mfrow=c(4,5), mar=c(2,5,2,1), las=1, bty="n")
# boxplot(baseSolo$Calcio, main="Calcio", ylab="Valores")
# boxplot(baseSolo$Magnesio, main="Magnesio", ylab="Valores")
# boxplot(baseSolo$Magnesio, main="Aluminio", ylab="Valores")
# boxplot(baseSolo$Potassio, main="Potassio", ylab="Valores")
# boxplot(baseSolo$Fosforo, main="Fosforo", ylab="Valores")
# boxplot(baseSolo$Enxofre, main="Enxofre", ylab="Valores")
# boxplot(baseSolo$MO, main="MO", ylab="Valores")
# boxplot(baseSolo$CTC, main="CTC", ylab="Valores")
# boxplot(baseSolo$SaturacaoPorBases, main="SaturacaoPorBases", ylab="Valores")
# boxplot(baseSolo$CalcioSaturacaoDeBases, main="CalcioSaturacaoDeBases", ylab="Valores")
# boxplot(baseSolo$MagnesioSaturacaoDebases, main="MagnesioSaturacaoDebases", ylab="Valores")
# boxplot(baseSolo$PotassioSaturacaoDeBases, main="PotassioSaturacaoDeBases", ylab="Valores")
# boxplot(baseSolo$pH, main="pH", ylab="Valores")
dataset = baseFinal
dataset.new <- baseFinal[, -(17:18)]	#Retira Latitude e Longitude da baseSolo
dataset.pca <- prcomp(dataset.new[, 5:16], center = TRUE, scale. = TRUE) #Retira Latitude e Longitude da baseColheita para Calcular PCA
g <- ggbiplot(dataset.pca, groups = dataset$Produtividade, obs.scale = 1, var.scale = 1, circle = TRUE, ellipse = TRUE)
print(g)
#(6) MAPA
summary(dataset$Rendimento.seco)
dataset[, 'Produtividade'] <- ifelse(dataset$Rendimento.seco >= median(dataset$Rendimento.seco), 1, 0)
dataset$Produtividade[dataset$Rendimento.seco<9.3] <- 0 #baixa
dataset$Produtividade[dataset$Rendimento.seco>10.9] <- 1 #alta
dfDataSet = data.frame(dataset)
dfAgregado = setNames(aggregate(dfDataSet$Rendimento.seco, by=list(PontoAmostral=dfDataSet$PontosAmostrais), FUN=median), c("PontoAmostral", "Rendimento"))
dfAgregado = dfAgregado[order(dfAgregado$Rendimento, decreasing = TRUE),]
PontoAmostralMaisProdutivo = dfAgregado[1,1]
PontoAmostralMenosProdutivo = dfAgregado[length(dfAgregado[,1]),1]
colunas <- c("Calcio","Magnesio","Al","Potassio","Fosforo","Enxofre","MO","CTC","SaturacaoPorBases","CalcioSaturacaoDeBases","MagnesioSaturacaoDebases","PotassioSaturacaoDeBases","pH")
baseAlta.new <- dataset[which(dataset$PontosAmostrais == PontoAmostralMaisProdutivo), colunas]
baseAlta.new[, colunas] <- lapply(baseAlta.new[, colunas], factor)
baseAlta.tr <- apriori(
baseAlta.new,
parameter = list(support = 1, minlen = 13, maxlen = 13, target = "frequent")
)
baseBaixa.new <- dataset[which(dataset$PontosAmostrais == PontoAmostralMenosProdutivo), colunas]
baseBaixa.new[, colunas] <- lapply(baseBaixa.new[, colunas], factor)
baseBaixa.tr <- apriori(
baseBaixa.new,
parameter = list(support = 1, minlen = 13, maxlen = 13, target = "frequent")
)
inspect(baseAlta.tr)
inspect(baseBaixa.tr)
# install.packages("devtools")
# install.packages("arules")
# install.packages("ggplot2")
# install.packages("caret")
# install.packages("iterators")
# install.packages("geosphere")
library(caret)
library(devtools)
# library(ggbiplot)
library(arules)
library(ggplot2)
library(iterators)
library(geosphere)
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
baseSolo = read.csv("datasets/baseSolo.csv")
baseColheita = read.csv("datasets/baseColheita.csv")
baseFinal = read.csv("datasets/dataset.csv")
# #Remove colunas com pouca variancia na baseSolo
# baseSolo.nzv = nearZeroVar(baseSolo, saveMetrics = TRUE)
# baseSolo = baseSolo[c(rownames(baseSolo.nzv[baseSolo.nzv$nzv == FALSE, ])) ]
# rm(baseSolo.nzv)
# par(mfrow=c(4,5), mar=c(2,5,2,1), las=1, bty="n")
# boxplot(baseSolo$Calcio, main="Calcio", ylab="Valores")
# boxplot(baseSolo$Magnesio, main="Magnesio", ylab="Valores")
boxplot(baseSolo$Magnesio, main="Aluminio", ylab="Valores")
# boxplot(baseSolo$Potassio, main="Potassio", ylab="Valores")
# boxplot(baseSolo$Fosforo, main="Fosforo", ylab="Valores")
# boxplot(baseSolo$Enxofre, main="Enxofre", ylab="Valores")
# boxplot(baseSolo$MO, main="MO", ylab="Valores")
# boxplot(baseSolo$CTC, main="CTC", ylab="Valores")
# boxplot(baseSolo$SaturacaoPorBases, main="SaturacaoPorBases", ylab="Valores")
# boxplot(baseSolo$CalcioSaturacaoDeBases, main="CalcioSaturacaoDeBases", ylab="Valores")
# boxplot(baseSolo$MagnesioSaturacaoDebases, main="MagnesioSaturacaoDebases", ylab="Valores")
# boxplot(baseSolo$PotassioSaturacaoDeBases, main="PotassioSaturacaoDeBases", ylab="Valores")
# boxplot(baseSolo$pH, main="pH", ylab="Valores")
dataset = baseFinal
dataset.new <- baseFinal[, -(17:18)]	#Retira Latitude e Longitude da baseSolo
dataset.pca <- prcomp(dataset.new[, 5:16], center = TRUE, scale. = TRUE) #Retira Latitude e Longitude da baseColheita para Calcular PCA
g <- ggbiplot(dataset.pca, groups = dataset$Produtividade, obs.scale = 1, var.scale = 1, circle = TRUE, ellipse = TRUE)
print(g)
#(6) MAPA
summary(dataset$Rendimento.seco)
dataset[, 'Produtividade'] <- ifelse(dataset$Rendimento.seco >= median(dataset$Rendimento.seco), 1, 0)
dataset$Produtividade[dataset$Rendimento.seco<9.3] <- 0 #baixa
dataset$Produtividade[dataset$Rendimento.seco>10.9] <- 1 #alta
dfDataSet = data.frame(dataset)
dfAgregado = setNames(aggregate(dfDataSet$Rendimento.seco, by=list(PontoAmostral=dfDataSet$PontosAmostrais), FUN=median), c("PontoAmostral", "Rendimento"))
dfAgregado = dfAgregado[order(dfAgregado$Rendimento, decreasing = TRUE),]
PontoAmostralMaisProdutivo = dfAgregado[1,1]
PontoAmostralMenosProdutivo = dfAgregado[length(dfAgregado[,1]),1]
colunas <- c("Calcio","Magnesio","Al","Potassio","Fosforo","Enxofre","MO","CTC","SaturacaoPorBases","CalcioSaturacaoDeBases","MagnesioSaturacaoDebases","PotassioSaturacaoDeBases","pH")
baseAlta.new <- dataset[which(dataset$PontosAmostrais == PontoAmostralMaisProdutivo), colunas]
baseAlta.new[, colunas] <- lapply(baseAlta.new[, colunas], factor)
baseAlta.tr <- apriori(
baseAlta.new,
parameter = list(support = 1, minlen = 13, maxlen = 13, target = "frequent")
)
baseBaixa.new <- dataset[which(dataset$PontosAmostrais == PontoAmostralMenosProdutivo), colunas]
baseBaixa.new[, colunas] <- lapply(baseBaixa.new[, colunas], factor)
baseBaixa.tr <- apriori(
baseBaixa.new,
parameter = list(support = 1, minlen = 13, maxlen = 13, target = "frequent")
)
inspect(baseAlta.tr)
inspect(baseBaixa.tr)
